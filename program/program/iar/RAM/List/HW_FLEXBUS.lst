###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       22/Dec/2017  21:48:11
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\19071_000\Desktop\K60_Car\lib\LPLD\HW\HW_FLEXBUS.c
#    Command line =  
#        -f C:\Users\19071_~1\AppData\Local\Temp\EWB1E2.tmp
#        (C:\Users\19071_000\Desktop\K60_Car\lib\LPLD\HW\HW_FLEXBUS.c -D
#        LPLD_K60 -D USE_K60DZ10 -lCN
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -lB
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List -o
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\app\ -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\CPU\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\HW\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\DEV\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\LPLD\FUNC\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Ports\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\uCOS-II\Source\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\FatFs\option\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\common\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\driver\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\descriptor\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\USB\class\
#        -I
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\..\..\..\lib\peripheral\
#        -Ol -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Include\" -D ARM_MATH_CM4)
#    Locale       =  C
#    List file    =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\List\HW_FLEXBUS.lst
#    Object file  =  
#        C:\Users\19071_000\Desktop\K60_Car\program\program\iar\RAM\Obj\HW_FLEXBUS.o
#
###############################################################################

C:\Users\19071_000\Desktop\K60_Car\lib\LPLD\HW\HW_FLEXBUS.c
      1          /**
      2           * @file HW_FLEXBUS.c
      3           * @version 3.0[By LPLD]
      4           * @date 2013-06-18
      5           * @brief FLEXBUS底层模块相关函数
      6           *
      7           * 更改建议:不建议修改
      8           *
      9           * 版权所有:北京拉普兰德电子技术有限公司
     10           * http://www.lpld.cn
     11           * mail:support@lpld.cn
     12           *
     13           * @par
     14           * 本代码由拉普兰德[LPLD]开发并维护，并向所有使用者开放源代码。
     15           * 开发者可以随意修使用或改源代码。但本段及以上注释应予以保留。
     16           * 不得更改或删除原版权所有者姓名，二次开发者可以加注二次版权所有者。
     17           * 但应在遵守此协议的基础上，开放源代码、不得出售代码本身。
     18           * 拉普兰德不负责由于使用本代码所带来的任何事故、法律责任或相关不良影响。
     19           * 拉普兰德无义务解释、说明本代码的具体原理、功能、实现方法。
     20           * 除非拉普兰德[LPLD]授权，开发者不得将本代码用于商业产品。
     21           */
     22          
     23          #include "common.h"
     24          #include "HW_FLEXBUS.h"
     25          

   \                                 In section .data, align 4
     26          const uint32* FB_PORT[32] = {(uint32*)&PORTD->PCR[6], (uint32*)&PORTD->PCR[5], (uint32*)&PORTD->PCR[4], (uint32*)&PORTD->PCR[3],
   \                     FB_PORT:
   \   00000000   0x4004C018         DC32 4004C018H, 4004C014H, 4004C010H, 4004C00CH, 4004C008H, 4004B028H
   \              0x4004C014   
   \              0x4004C010   
   \              0x4004C00C   
   \              0x4004C008   
   \              0x4004B028   
   \   00000018   0x4004B024         DC32 4004B024H, 4004B020H, 4004B01CH, 4004B018H, 4004B014H, 4004B010H
   \              0x4004B020   
   \              0x4004B01C   
   \              0x4004B018   
   \              0x4004B014   
   \              0x4004B010   
   \   00000030   0x4004B008         DC32 4004B008H, 4004B004H, 4004B000H, 4004A048H, 4004A044H, 4004A040H
   \              0x4004B004   
   \              0x4004B000   
   \              0x4004A048   
   \              0x4004A044   
   \              0x4004A040   
   \   00000048   0x4004A02C         DC32 4004A02CH, 4004A028H, 4004A024H, 4004A020H, 4004A01CH, 4004A018H
   \              0x4004A028   
   \              0x4004A024   
   \              0x4004A020   
   \              0x4004A01C   
   \              0x4004A018   
   \   00000060   0x4004B03C         DC32 4004B03CH, 4004B038H, 4004B034H, 4004B030H, 4004A05CH, 4004A058H
   \              0x4004B038   
   \              0x4004B034   
   \              0x4004B030   
   \              0x4004A05C   
   \              0x4004A058   
   \   00000078   0x4004A054         DC32 4004A054H, 4004A050H
   \              0x4004A050   
     27                                       (uint32*)&PORTD->PCR[2], (uint32*)&PORTC->PCR[10], (uint32*)&PORTC->PCR[9], (uint32*)&PORTC->PCR[8],
     28                                       (uint32*)&PORTC->PCR[7], (uint32*)&PORTC->PCR[6], (uint32*)&PORTC->PCR[5], (uint32*)&PORTC->PCR[4],
     29                                       (uint32*)&PORTC->PCR[2], (uint32*)&PORTC->PCR[1], (uint32*)&PORTC->PCR[0], (uint32*)&PORTB->PCR[18],
     30                                       (uint32*)&PORTB->PCR[17], (uint32*)&PORTB->PCR[16], (uint32*)&PORTB->PCR[11], (uint32*)&PORTB->PCR[10],
     31                                       (uint32*)&PORTB->PCR[9], (uint32*)&PORTB->PCR[8], (uint32*)&PORTB->PCR[7], (uint32*)&PORTB->PCR[6],
     32                                       (uint32*)&PORTC->PCR[15], (uint32*)&PORTC->PCR[14], (uint32*)&PORTC->PCR[13], (uint32*)&PORTC->PCR[12],
     33                                       (uint32*)&PORTB->PCR[23], (uint32*)&PORTB->PCR[22], (uint32*)&PORTB->PCR[21], (uint32*)&PORTB->PCR[20]};
     34          
     35          /*
     36           * LPLD_FlexBus_Init
     37           * FlexBux通用初始化函数
     38           * 
     39           * 参数:
     40           *    fb_init_struct--FlexBus初始化结构体，
     41           *                        具体定义见FB_InitTypeDef
     42           *
     43           * 输出:
     44           *    0--配置错误
     45           *    1--配置成功
     46           */

   \                                 In section .text, align 4, keep-with-next
     47          uint8 LPLD_FlexBus_Init(FB_InitTypeDef fb_init_struct)
     48          {
   \                     LPLD_FlexBus_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
     49            FBx Fbx = fb_init_struct.FB_Fbx;
   \   00000006   0xF89D 0x5028      LDRB     R5,[SP, #+40]
     50            uint32 base_addr = fb_init_struct.FB_ChipSelAddress;
   \   0000000A   0xF8DD 0x902C      LDR      R9,[SP, #+44]
     51            uint32 addr_space = fb_init_struct.FB_AddressSpace;
   \   0000000E   0x9E0C             LDR      R6,[SP, #+48]
     52            uint8 size = fb_init_struct.FB_PortSize;
   \   00000010   0xF89D 0x7034      LDRB     R7,[SP, #+52]
     53            boolean justied = fb_init_struct.FB_IsRightJustied;
   \   00000014   0xF89D 0x4035      LDRB     R4,[SP, #+53]
     54            boolean aa = fb_init_struct.FB_AutoAckEnable;
   \   00000018   0xF89D 0x0036      LDRB     R0,[SP, #+54]
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
     55            uint8 ws = fb_init_struct.FB_WateStates;
   \   00000020   0xF89D 0xA037      LDRB     R10,[SP, #+55]
     56            uint8 rah = fb_init_struct.FB_ReadAddrHold; 
   \   00000024   0xF89D 0x8038      LDRB     R8,[SP, #+56]
     57            uint8 wah = fb_init_struct.FB_WriteAddrHold;
   \   00000028   0xF89D 0xB039      LDRB     R11,[SP, #+57]
     58            uint32* pcr;
     59            uint8 n=0;
   \   0000002C   0x2000             MOVS     R0,#+0
     60            
     61            //参数检查
     62            ASSERT( Fbx <= 5);    //判断FB通道号
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D06             CMP      R5,#+6
   \   00000032   0xDB03             BLT.N    ??LPLD_FlexBus_Init_0
   \   00000034   0x213E             MOVS     R1,#+62
   \   00000036   0x48AD             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000038   0x.... 0x....      BL       assert_failed
     63            ASSERT( base_addr >= 0x60000000 && base_addr <= 0xDFFFFFFF);    //判断基地址合法性
   \                     ??LPLD_FlexBus_Init_0: (+1)
   \   0000003C   0xF1B9 0x40C0      SUBS     R0,R9,#+1610612736
   \   00000040   0xF1B0 0x4F00      CMP      R0,#-2147483648
   \   00000044   0xD303             BCC.N    ??LPLD_FlexBus_Init_2
   \   00000046   0x213F             MOVS     R1,#+63
   \   00000048   0x48A8             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   0000004A   0x.... 0x....      BL       assert_failed
     64            ASSERT( addr_space != 0);    //寻址空间大小
   \                     ??LPLD_FlexBus_Init_2: (+1)
   \   0000004E   0x2E00             CMP      R6,#+0
   \   00000050   0xD103             BNE.N    ??LPLD_FlexBus_Init_3
   \   00000052   0x2140             MOVS     R1,#+64
   \   00000054   0x48A5             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000056   0x.... 0x....      BL       assert_failed
     65            ASSERT( size <= 3);    //判断数据位宽
   \                     ??LPLD_FlexBus_Init_3: (+1)
   \   0000005A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005C   0x2F04             CMP      R7,#+4
   \   0000005E   0xDB03             BLT.N    ??LPLD_FlexBus_Init_4
   \   00000060   0x2141             MOVS     R1,#+65
   \   00000062   0x48A2             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000064   0x.... 0x....      BL       assert_failed
     66            ASSERT( rah <= 3);     //判断读地址保持时间
   \                     ??LPLD_FlexBus_Init_4: (+1)
   \   00000068   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000006C   0xF1B8 0x0F04      CMP      R8,#+4
   \   00000070   0xDB03             BLT.N    ??LPLD_FlexBus_Init_5
   \   00000072   0x2142             MOVS     R1,#+66
   \   00000074   0x489D             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000076   0x.... 0x....      BL       assert_failed
     67            ASSERT( wah <= 3);     //判断写地址保持时间
   \                     ??LPLD_FlexBus_Init_5: (+1)
   \   0000007A   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000007E   0xF1BB 0x0F04      CMP      R11,#+4
   \   00000082   0xDB03             BLT.N    ??LPLD_FlexBus_Init_6
   \   00000084   0x2143             MOVS     R1,#+67
   \   00000086   0x4899             LDR.N    R0,??LPLD_FlexBus_Init_1
   \   00000088   0x.... 0x....      BL       assert_failed
     68            
     69            FB->CS[Fbx].CSMR = 0;
   \                     ??LPLD_FlexBus_Init_6: (+1)
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x4998             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   00000090   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000092   0x220C             MOVS     R2,#+12
   \   00000094   0xFB02 0xF205      MUL      R2,R2,R5
   \   00000098   0x4411             ADD      R1,R1,R2
   \   0000009A   0x6048             STR      R0,[R1, #+4]
     70                
     71            //设置基地址
     72            FB->CS[Fbx].CSAR = base_addr;
   \   0000009C   0x4894             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000009E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000A0   0x210C             MOVS     R1,#+12
   \   000000A2   0xFB01 0xF105      MUL      R1,R1,R5
   \   000000A6   0xF840 0x9001      STR      R9,[R0, R1]
     73            //端口位宽
     74            FB->CS[Fbx].CSCR  = FB_CSCR_PS(size);      
   \   000000AA   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000AC   0x01B8             LSLS     R0,R7,#+6
   \   000000AE   0xF010 0x00C0      ANDS     R0,R0,#0xC0
   \   000000B2   0x498F             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B6   0x220C             MOVS     R2,#+12
   \   000000B8   0xFB02 0xF205      MUL      R2,R2,R5
   \   000000BC   0x4411             ADD      R1,R1,R2
   \   000000BE   0x6088             STR      R0,[R1, #+8]
     75            
     76            if(justied)
   \   000000C0   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C2   0x2C00             CMP      R4,#+0
   \   000000C4   0xD00F             BEQ.N    ??LPLD_FlexBus_Init_7
     77            {
     78              FB->CS[Fbx].CSCR |= FB_CSCR_BLS_MASK;   // 数据右对齐
   \   000000C6   0x488A             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CA   0x210C             MOVS     R1,#+12
   \   000000CC   0xFB01 0xF105      MUL      R1,R1,R5
   \   000000D0   0x4408             ADD      R0,R0,R1
   \   000000D2   0x6880             LDR      R0,[R0, #+8]
   \   000000D4   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   000000D8   0x4985             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000DA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000DC   0x220C             MOVS     R2,#+12
   \   000000DE   0xFB02 0xF205      MUL      R2,R2,R5
   \   000000E2   0x4411             ADD      R1,R1,R2
   \   000000E4   0x6088             STR      R0,[R1, #+8]
     79            }
     80                
     81            if(aa)    
   \                     ??LPLD_FlexBus_Init_7: (+1)
   \   000000E6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD00F             BEQ.N    ??LPLD_FlexBus_Init_8
     82            {
     83              FB->CS[Fbx].CSCR |= FB_CSCR_AA_MASK;   //使能内部应答
   \   000000EE   0x4880             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   000000F0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000F2   0x210C             MOVS     R1,#+12
   \   000000F4   0xFB01 0xF105      MUL      R1,R1,R5
   \   000000F8   0x4408             ADD      R0,R0,R1
   \   000000FA   0x6880             LDR      R0,[R0, #+8]
   \   000000FC   0xF450 0x7080      ORRS     R0,R0,#0x100
   \   00000100   0x497B             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   00000102   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000104   0x220C             MOVS     R2,#+12
   \   00000106   0xFB02 0xF205      MUL      R2,R2,R5
   \   0000010A   0x4411             ADD      R1,R1,R2
   \   0000010C   0x6088             STR      R0,[R1, #+8]
     84            }
     85            
     86            FB->CS[Fbx].CSCR |= FB_CSCR_WS(ws)    // 在内部应答信号之前加入ws个WS
     87                               | FB_CSCR_RDAH(rah)
     88                               | FB_CSCR_WRAH(wah);
   \                     ??LPLD_FlexBus_Init_8: (+1)
   \   0000010E   0x4878             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   00000110   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000112   0x210C             MOVS     R1,#+12
   \   00000114   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000118   0x4408             ADD      R0,R0,R1
   \   0000011A   0x6880             LDR      R0,[R0, #+8]
   \   0000011C   0xFA5F 0xFA8A      UXTB     R10,R10          ;; ZeroExt  R10,R10,#+24,#+24
   \   00000120   0xEA5F 0x2A8A      LSLS     R10,R10,#+10
   \   00000124   0xF41A 0x4A7C      ANDS     R10,R10,#0xFC00
   \   00000128   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000012C   0xEA5F 0x4888      LSLS     R8,R8,#+18
   \   00000130   0xF418 0x2840      ANDS     R8,R8,#0xC0000
   \   00000134   0xEA58 0x0A0A      ORRS     R10,R8,R10
   \   00000138   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   0000013C   0xEA5F 0x4B0B      LSLS     R11,R11,#+16
   \   00000140   0xF41B 0x3B40      ANDS     R11,R11,#0x30000
   \   00000144   0xEA5B 0x0B0A      ORRS     R11,R11,R10
   \   00000148   0xEA5B 0x0B00      ORRS     R11,R11,R0
   \   0000014C   0x4868             LDR.N    R0,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   0000014E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000150   0x210C             MOVS     R1,#+12
   \   00000152   0xFB01 0xF105      MUL      R1,R1,R5
   \   00000156   0x4408             ADD      R0,R0,R1
   \   00000158   0xF8C0 0xB008      STR      R11,[R0, #+8]
     89            
     90            //根据寻址空间大小计算基地址掩码
     91            addr_space = (addr_space-1)>>16;
   \   0000015C   0x1E76             SUBS     R6,R6,#+1
   \   0000015E   0x0C36             LSRS     R6,R6,#+16
     92            FB->CS[Fbx].CSMR = FB_CSMR_BAM(addr_space)  //设置基地址掩码为128K地址空间 =2^n(n=BAM+16)
     93                          | FB_CSMR_V_MASK;    //使能CS信号
   \   00000160   0x0430             LSLS     R0,R6,#+16
   \   00000162   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000166   0x4962             LDR.N    R1,??LPLD_FlexBus_Init_1+0x4  ;; 0x4000c000
   \   00000168   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000016A   0x220C             MOVS     R2,#+12
   \   0000016C   0xFB02 0xF205      MUL      R2,R2,R5
   \   00000170   0x4411             ADD      R1,R1,R2
   \   00000172   0x6048             STR      R0,[R1, #+4]
     94            
     95            //使能复用功能的FB_CSn及引脚复用
     96            if(Fbx == FB0)
   \   00000174   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000176   0x2D00             CMP      R5,#+0
   \   00000178   0xD104             BNE.N    ??LPLD_FlexBus_Init_9
     97            {
     98              PORTD->PCR[1]  = PORT_PCR_MUX(5);       // FB_CS0     
   \   0000017A   0xF44F 0x60A0      MOV      R0,#+1280
   \   0000017E   0x495D             LDR.N    R1,??LPLD_FlexBus_Init_1+0x8  ;; 0x4004c004
   \   00000180   0x6008             STR      R0,[R1, #+0]
   \   00000182   0xE05E             B.N      ??LPLD_FlexBus_Init_10
     99            }
    100            else if(Fbx == FB1)
   \                     ??LPLD_FlexBus_Init_9: (+1)
   \   00000184   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000186   0x2D01             CMP      R5,#+1
   \   00000188   0xD110             BNE.N    ??LPLD_FlexBus_Init_11
    101            {
    102              FB->CSPMCR &= ~(FB_CSPMCR_GROUP1_MASK);
   \   0000018A   0x485B             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000018C   0x6800             LDR      R0,[R0, #+0]
   \   0000018E   0xF020 0x4070      BIC      R0,R0,#0xF0000000
   \   00000192   0x4959             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000194   0x6008             STR      R0,[R1, #+0]
    103              FB->CSPMCR |= FB_CSPMCR_GROUP1(1);      
   \   00000196   0x4858             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000198   0x6800             LDR      R0,[R0, #+0]
   \   0000019A   0xF050 0x5080      ORRS     R0,R0,#0x10000000
   \   0000019E   0x4956             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001A0   0x6008             STR      R0,[R1, #+0]
    104              PORTD->PCR[0]  = PORT_PCR_MUX(5);       // FB_CS1  
   \   000001A2   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001A6   0x4955             LDR.N    R1,??LPLD_FlexBus_Init_1+0x10  ;; 0x4004c000
   \   000001A8   0x6008             STR      R0,[R1, #+0]
   \   000001AA   0xE04A             B.N      ??LPLD_FlexBus_Init_10
    105            }
    106            else if(Fbx == FB2)
   \                     ??LPLD_FlexBus_Init_11: (+1)
   \   000001AC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001AE   0x2D02             CMP      R5,#+2
   \   000001B0   0xD110             BNE.N    ??LPLD_FlexBus_Init_12
    107            {
    108              FB->CSPMCR &= ~(FB_CSPMCR_GROUP4_MASK);
   \   000001B2   0x4851             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001B4   0x6800             LDR      R0,[R0, #+0]
   \   000001B6   0xF430 0x2070      BICS     R0,R0,#0xF0000
   \   000001BA   0x494F             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001BC   0x6008             STR      R0,[R1, #+0]
    109              FB->CSPMCR |= FB_CSPMCR_GROUP4(1);     
   \   000001BE   0x484E             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001C0   0x6800             LDR      R0,[R0, #+0]
   \   000001C2   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   000001C6   0x494C             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001C8   0x6008             STR      R0,[R1, #+0]
    110              PORTC->PCR[18]  = PORT_PCR_MUX(5);       // FB_CS2
   \   000001CA   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001CE   0x494C             LDR.N    R1,??LPLD_FlexBus_Init_1+0x14  ;; 0x4004b048
   \   000001D0   0x6008             STR      R0,[R1, #+0]
   \   000001D2   0xE036             B.N      ??LPLD_FlexBus_Init_10
    111            }
    112            else if(Fbx == FB3)
   \                     ??LPLD_FlexBus_Init_12: (+1)
   \   000001D4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001D6   0x2D03             CMP      R5,#+3
   \   000001D8   0xD110             BNE.N    ??LPLD_FlexBus_Init_13
    113            {
    114              FB->CSPMCR &= ~(FB_CSPMCR_GROUP5_MASK);
   \   000001DA   0x4847             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0xF430 0x4070      BICS     R0,R0,#0xF000
   \   000001E2   0x4945             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001E4   0x6008             STR      R0,[R1, #+0]
    115              FB->CSPMCR |= FB_CSPMCR_GROUP5(1);     
   \   000001E6   0x4844             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001E8   0x6800             LDR      R0,[R0, #+0]
   \   000001EA   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   000001EE   0x4942             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   000001F0   0x6008             STR      R0,[R1, #+0]
    116              PORTC->PCR[19]  = PORT_PCR_MUX(5);       // FB_CS3
   \   000001F2   0xF44F 0x60A0      MOV      R0,#+1280
   \   000001F6   0x4943             LDR.N    R1,??LPLD_FlexBus_Init_1+0x18  ;; 0x4004b04c
   \   000001F8   0x6008             STR      R0,[R1, #+0]
   \   000001FA   0xE022             B.N      ??LPLD_FlexBus_Init_10
    117            }
    118            else if(Fbx == FB4)
   \                     ??LPLD_FlexBus_Init_13: (+1)
   \   000001FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001FE   0x2D04             CMP      R5,#+4
   \   00000200   0xD10E             BNE.N    ??LPLD_FlexBus_Init_14
    119            {
    120              FB->CSPMCR &= ~(FB_CSPMCR_GROUP2_MASK);
   \   00000202   0x483D             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000204   0x6800             LDR      R0,[R0, #+0]
   \   00000206   0xF030 0x6070      BICS     R0,R0,#0xF000000
   \   0000020A   0x493B             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   0000020C   0x6008             STR      R0,[R1, #+0]
    121              FB->CSPMCR |= FB_CSPMCR_GROUP2(0);      
   \   0000020E   0x483A             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000210   0x6800             LDR      R0,[R0, #+0]
   \   00000212   0x4939             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000214   0x6008             STR      R0,[R1, #+0]
    122              PORTC->PCR[17]  = PORT_PCR_MUX(5);       // FB_CS4
   \   00000216   0xF44F 0x60A0      MOV      R0,#+1280
   \   0000021A   0x493B             LDR.N    R1,??LPLD_FlexBus_Init_1+0x1C  ;; 0x4004b044
   \   0000021C   0x6008             STR      R0,[R1, #+0]
   \   0000021E   0xE010             B.N      ??LPLD_FlexBus_Init_10
    123            }
    124            else if(Fbx == FB5)
   \                     ??LPLD_FlexBus_Init_14: (+1)
   \   00000220   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000222   0x2D05             CMP      R5,#+5
   \   00000224   0xD10D             BNE.N    ??LPLD_FlexBus_Init_10
    125            {
    126              FB->CSPMCR &= ~(FB_CSPMCR_GROUP3_MASK);
   \   00000226   0x4834             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000228   0x6800             LDR      R0,[R0, #+0]
   \   0000022A   0xF430 0x0070      BICS     R0,R0,#0xF00000
   \   0000022E   0x4932             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000230   0x6008             STR      R0,[R1, #+0]
    127              FB->CSPMCR |= FB_CSPMCR_GROUP3(0);     
   \   00000232   0x4831             LDR.N    R0,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000234   0x6800             LDR      R0,[R0, #+0]
   \   00000236   0x4930             LDR.N    R1,??LPLD_FlexBus_Init_1+0xC  ;; 0x4000c060
   \   00000238   0x6008             STR      R0,[R1, #+0]
    128              PORTC->PCR[16]  = PORT_PCR_MUX(5);       // FB_CS5
   \   0000023A   0xF44F 0x60A0      MOV      R0,#+1280
   \   0000023E   0x4933             LDR.N    R1,??LPLD_FlexBus_Init_1+0x20  ;; 0x4004b040
   \   00000240   0x6008             STR      R0,[R1, #+0]
    129            }
    130            
    131            //使能总线地址、数据引脚复用功能
    132            //先使能低16位地址总线
    133            for(uint8 i=0; i<16; i++)
   \                     ??LPLD_FlexBus_Init_10: (+1)
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0xE007             B.N      ??LPLD_FlexBus_Init_15
    134            {
    135              pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_16: (+1)
   \   00000246   0x4932             LDR.N    R1,??LPLD_FlexBus_Init_1+0x24
   \   00000248   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000024A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
    136              *pcr = PORT_PCR_MUX(5);    
   \   0000024E   0xF44F 0x62A0      MOV      R2,#+1280
   \   00000252   0x600A             STR      R2,[R1, #+0]
    137            }
   \   00000254   0x1C40             ADDS     R0,R0,#+1
   \                     ??LPLD_FlexBus_Init_15: (+1)
   \   00000256   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000258   0x2810             CMP      R0,#+16
   \   0000025A   0xDBF4             BLT.N    ??LPLD_FlexBus_Init_16
    138            //使能其余的地址总线
    139            n=16;
   \   0000025C   0x2010             MOVS     R0,#+16
    140            for(uint8 i=0; i<16; i++)
   \   0000025E   0x2200             MOVS     R2,#+0
   \   00000260   0xE00C             B.N      ??LPLD_FlexBus_Init_17
    141            {
    142              if((addr_space>>i)&0x01)
   \                     ??LPLD_FlexBus_Init_18: (+1)
   \   00000262   0x0031             MOVS     R1,R6
   \   00000264   0x40D1             LSRS     R1,R1,R2
   \   00000266   0x07C9             LSLS     R1,R1,#+31
   \   00000268   0xD507             BPL.N    ??LPLD_FlexBus_Init_19
    143              {
    144                pcr = (uint32 *)FB_PORT[n++];
   \   0000026A   0x4929             LDR.N    R1,??LPLD_FlexBus_Init_1+0x24
   \   0000026C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000026E   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000272   0x1C40             ADDS     R0,R0,#+1
    145                *pcr = PORT_PCR_MUX(5); 
   \   00000274   0xF44F 0x63A0      MOV      R3,#+1280
   \   00000278   0x600B             STR      R3,[R1, #+0]
    146              }
    147            }
   \                     ??LPLD_FlexBus_Init_19: (+1)
   \   0000027A   0x1C52             ADDS     R2,R2,#+1
   \                     ??LPLD_FlexBus_Init_17: (+1)
   \   0000027C   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000027E   0x2A10             CMP      R2,#+16
   \   00000280   0xDBEF             BLT.N    ??LPLD_FlexBus_Init_18
    148            //如果是32位宽，则使能高16位
    149            n=0;
   \   00000282   0x2000             MOVS     R0,#+0
    150            if(size == 0)
   \   00000284   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000286   0x2F00             CMP      R7,#+0
   \   00000288   0xD101             BNE.N    ??LPLD_FlexBus_Init_20
    151            {   
    152              n=16;
   \   0000028A   0x2010             MOVS     R0,#+16
   \   0000028C   0xE00E             B.N      ??LPLD_FlexBus_Init_21
    153            }else if(justied==0 && size == 0x10)
   \                     ??LPLD_FlexBus_Init_20: (+1)
   \   0000028E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000290   0x2C00             CMP      R4,#+0
   \   00000292   0xD104             BNE.N    ??LPLD_FlexBus_Init_22
   \   00000294   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000296   0x2F10             CMP      R7,#+16
   \   00000298   0xD101             BNE.N    ??LPLD_FlexBus_Init_22
    154            {
    155              n=16;
   \   0000029A   0x2010             MOVS     R0,#+16
   \   0000029C   0xE006             B.N      ??LPLD_FlexBus_Init_21
    156            }else if(justied==0 && size == 0x01)
   \                     ??LPLD_FlexBus_Init_22: (+1)
   \   0000029E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000002A0   0x2C00             CMP      R4,#+0
   \   000002A2   0xD103             BNE.N    ??LPLD_FlexBus_Init_21
   \   000002A4   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002A6   0x2F01             CMP      R7,#+1
   \   000002A8   0xD100             BNE.N    ??LPLD_FlexBus_Init_21
    157            {
    158              n=8;
   \   000002AA   0x2008             MOVS     R0,#+8
    159            }
    160            if(n!=0)
   \                     ??LPLD_FlexBus_Init_21: (+1)
   \   000002AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002AE   0x2800             CMP      R0,#+0
   \   000002B0   0xD00F             BEQ.N    ??LPLD_FlexBus_Init_23
    161            {
    162              for(uint8 i=31; i>31-n; i--)
   \   000002B2   0x221F             MOVS     R2,#+31
   \   000002B4   0xE007             B.N      ??LPLD_FlexBus_Init_24
    163              {
    164                pcr = (uint32 *)FB_PORT[i];
   \                     ??LPLD_FlexBus_Init_25: (+1)
   \   000002B6   0x4916             LDR.N    R1,??LPLD_FlexBus_Init_1+0x24
   \   000002B8   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002BA   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
    165                *pcr = PORT_PCR_MUX(5);    
   \   000002BE   0xF44F 0x63A0      MOV      R3,#+1280
   \   000002C2   0x600B             STR      R3,[R1, #+0]
    166              }
   \   000002C4   0x1E52             SUBS     R2,R2,#+1
   \                     ??LPLD_FlexBus_Init_24: (+1)
   \   000002C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000002C8   0xF1D0 0x011F      RSBS     R1,R0,#+31
   \   000002CC   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002CE   0x4291             CMP      R1,R2
   \   000002D0   0xDBF1             BLT.N    ??LPLD_FlexBus_Init_25
    167            }
    168            
    169            //控制信号线
    170            PORTB->PCR[19] = PORT_PCR_MUX(5);          // fb_oe_b
   \                     ??LPLD_FlexBus_Init_23: (+1)
   \   000002D2   0xF44F 0x60A0      MOV      R0,#+1280
   \   000002D6   0x490F             LDR.N    R1,??LPLD_FlexBus_Init_1+0x28  ;; 0x4004a04c
   \   000002D8   0x6008             STR      R0,[R1, #+0]
    171            PORTC->PCR[11] = PORT_PCR_MUX(5);          // fb_rw_b  
   \   000002DA   0xF44F 0x60A0      MOV      R0,#+1280
   \   000002DE   0x490E             LDR.N    R1,??LPLD_FlexBus_Init_1+0x2C  ;; 0x4004b02c
   \   000002E0   0x6008             STR      R0,[R1, #+0]
    172                        
    173            return 1;
   \   000002E2   0x2001             MOVS     R0,#+1
   \   000002E4   0xE8BD 0x0FF2      POP      {R1,R4-R11}
   \   000002E8   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
   \                     ??LPLD_FlexBus_Init_1:
   \   000002EC   0x........         DC32     ?_0
   \   000002F0   0x4000C000         DC32     0x4000c000
   \   000002F4   0x4004C004         DC32     0x4004c004
   \   000002F8   0x4000C060         DC32     0x4000c060
   \   000002FC   0x4004C000         DC32     0x4004c000
   \   00000300   0x4004B048         DC32     0x4004b048
   \   00000304   0x4004B04C         DC32     0x4004b04c
   \   00000308   0x4004B044         DC32     0x4004b044
   \   0000030C   0x4004B040         DC32     0x4004b040
   \   00000310   0x........         DC32     FB_PORT
   \   00000314   0x4004A04C         DC32     0x4004a04c
   \   00000318   0x4004B02C         DC32     0x4004b02c
    174          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x31          DC8 5CH, 31H, 39H, 30H, 37H, 31H, 5FH, 30H
   \              0x39 0x30    
   \              0x37 0x31    
   \              0x5F 0x30    
   \   00000010   0x30 0x30          DC8 30H, 30H, 5CH, 44H, 65H, 73H, 6BH, 74H
   \              0x5C 0x44    
   \              0x65 0x73    
   \              0x6B 0x74    
   \   00000018   0x6F 0x70          DC8 6FH, 70H, 5CH, 4BH, 36H, 30H, 5FH, 43H
   \              0x5C 0x4B    
   \              0x36 0x30    
   \              0x5F 0x43    
   \   00000020   0x61 0x72          DC8 61H, 72H, 5CH, 6CH, 69H, 62H, 5CH, 4CH
   \              0x5C 0x6C    
   \              0x69 0x62    
   \              0x5C 0x4C    
   \   00000028   0x50 0x4C          DC8 50H, 4CH, 44H, 5CH, 48H, 57H, 5CH, 48H
   \              0x44 0x5C    
   \              0x48 0x57    
   \              0x5C 0x48    
   \   00000030   0x57 0x5F          DC8 57H, 5FH, 46H, 4CH, 45H, 58H, 42H, 55H
   \              0x46 0x4C    
   \              0x45 0x58    
   \              0x42 0x55    
   \   00000038   0x53 0x2E          DC8 53H, 2EH, 63H, 0
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   LPLD_FlexBus_Init
        56   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      60  ?_0
     128  FB_PORT
     796  LPLD_FlexBus_Init

 
 128 bytes in section .data
  60 bytes in section .rodata
 796 bytes in section .text
 
 796 bytes of CODE  memory
  60 bytes of CONST memory
 128 bytes of DATA  memory

Errors: none
Warnings: none
